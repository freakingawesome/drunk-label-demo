module Demo exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Html.App as App
import Time exposing (Time, millisecond, second)
import String
import DrunkLabel
import Json.Decode as Json
import Data.Decimal as Decimal
import Update.Extra.Infix exposing (..)


main : Program Never
main =
  App.program
    { init = init 0
    , view = view
    , update = update
    , subscriptions = subscriptions
    }

-- MODEL

type alias Model =
  { preview : DrunkLabel.Model
  , tagline : DrunkLabel.Model
  , value : String
  , sobriety : Float
  , brashness : Float
  , minWait : Time
  , maxWait : Time
  , showCursor : Bool
  , cursorBlinkInterval : Time
  , showAdvanced : Bool
  }

defaultTagline : String
defaultTagline = "Mistyping as a Service"

init : Int -> (Model, Cmd Msg)
init seed =
  let
    flags = DrunkLabel.defaultFlags
    previewSettings = 
      { flags
        | initialSeed = seed
        , value = "A quick brown fox jumps over the lazy dog"
      }
    (preview, previewCmd) = DrunkLabel.init previewSettings
    (tagline, taglineCmd) = DrunkLabel.init
      { flags
        | initialSeed = seed + 1 -- +1 to avoid the same seed trail
        , value = defaultTagline
        , sobriety = 0.85
        , brashness = 0.5
      }
  in
    { preview = preview
    , tagline = tagline
    , value = previewSettings.value
    , sobriety = previewSettings.sobriety
    , brashness = previewSettings.brashness
    , minWait = previewSettings.minWait
    , maxWait = previewSettings.maxWait
    , showCursor = previewSettings.showCursor
    , cursorBlinkInterval = previewSettings.cursorBlinkInterval
    , showAdvanced = True
    } ! [ Cmd.map PreviewMsg previewCmd, Cmd.map TaglineMsg taglineCmd ]

-- UPDATE

type Msg
  = PreviewMsg DrunkLabel.Msg
  | TaglineMsg DrunkLabel.Msg
  | ResetTagline
  | SetSobriety String
  | SetBrashness String
  | SetMinWait String
  | SetMaxWait String
  | ToggleShowCursor
  | SetCursorBlinkInterval String
  | ToggleShowAdvanced

update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  case msg of
    PreviewMsg submsg ->
      let (preview, cmd') = DrunkLabel.update submsg model.preview
      in { model | preview = preview } ! [ Cmd.map PreviewMsg cmd' ]
    TaglineMsg submsg ->
      let (tagline, cmd') = DrunkLabel.update submsg model.tagline
      in { model | tagline = tagline } ! [ Cmd.map TaglineMsg cmd' ]
    ResetTagline ->
      update (TaglineMsg <| DrunkLabel.SetValue defaultTagline) model
    SetSobriety str ->
      { model | sobriety = Result.withDefault model.sobriety <| String.toFloat str } ! []
        :> \m -> update (PreviewMsg (DrunkLabel.SetSobriety m.sobriety)) m
    SetBrashness str ->
      { model | brashness = Result.withDefault model.brashness <| String.toFloat str } ! []
        :> \m -> update (PreviewMsg (DrunkLabel.SetBrashness m.brashness)) m
    SetMinWait str ->
      { model | minWait = Result.withDefault model.minWait <| String.toFloat str } ! []
        :> \m -> update (PreviewMsg (DrunkLabel.SetMinWait m.minWait)) m
    SetMaxWait str ->
      { model | maxWait = Result.withDefault model.maxWait <| String.toFloat str } ! []
        :> \m -> update (PreviewMsg (DrunkLabel.SetMaxWait m.maxWait)) m
    ToggleShowCursor ->
      let showCursor = not model.showCursor
      in update (PreviewMsg <| DrunkLabel.ShowCursor <| showCursor) { model | showCursor = showCursor }
    SetCursorBlinkInterval str ->
      { model | cursorBlinkInterval = Result.withDefault model.cursorBlinkInterval <| String.toFloat str } ! []
        :> \m -> update (PreviewMsg (DrunkLabel.SetCursorBlinkInterval m.cursorBlinkInterval)) m
    ToggleShowAdvanced ->
      { model | showAdvanced = not model.showAdvanced } ! []


-- SUBSCRIPTIONS

subscriptions : Model -> Sub Msg
subscriptions model =
  Sub.batch
    [ Sub.map PreviewMsg <| DrunkLabel.subscriptions model.preview
    , Sub.map TaglineMsg <| DrunkLabel.subscriptions model.tagline
    , Time.every (10 * second) (always ResetTagline)
    ]


-- VIEW
view : Model -> Html Msg
view model =
  <div>
    <div class="jumbotron">
      <div class="container">
        <h1>
          DrunkLabel
        </h1>
        <h2>{App.map PreviewMsg <| DrunkLabel.view model.tagline}</h2>
        <p>
          DrunkLabel is an Elm component which types things out to the screen ... poorly. The sobriety of
          the typist is entirely at your control.
        </p>
        <p>
          <a class="btn btn-primary btn-lg" href="http://package.elm-lang.org/packages/freakingawesome/drunk-label/latest" role="button">Get DrunkLabel</a>
          <a class="btn btn-default btn-lg pull-right" href="https://github.com/freakingawesome/drunk-label" role="button">Browse Source</a>
        </p>
      </div>
    </div>
    <div class="container">
      <h3>Playground</h3>
      <p>
        DrunkLabel will attempt to type your input in the output
        field. The higher the blood alcohol content, the longer it will take, so be patient and
        enjoy the struggle!
      </p>
      <div class="row">
        <div class="col-sm-4">
          <form>
            <div class="form-group">
              <label for="input">Input</label>
              <textarea class="form-control" rows="3" cols="80" id="input" {onInput (PreviewMsg << DrunkLabel.SetValue)}>{=model.value}</textarea>
            </div>
            
            {viewAdvanced model}
          </form>
        </div>

        <div class="col-sm-8">
          <form>
            <div class="form-group">
              <label for="output">Output</label>
              <pre style="font-size: 20px; min-height: 500px;">{App.map PreviewMsg <| DrunkLabel.view model.preview}</pre>
            </div>
          </form>
        </div>
      </div>
      <div class="pull-right">
        <a class="form-control-static pull-right" {onClick (PreviewMsg <| DrunkLabel.SetValue kanye)}>kanye</a>
      </div>
    </div>
  </div>

viewAdvanced : Model -> Html Msg
viewAdvanced model =
  if model.showAdvanced
    then
      <div>
        <div class="form-group">
          <label for="sobriety">Sobriety {showPct model.sobriety}</label>
          {sliderView "sobriety" model.sobriety SetSobriety 0.5 1}
        </div>

        <div class="form-group">
          <label for="brashness">Brashness {showPct model.brashness}</label>
          {sliderView "brashness" model.brashness SetBrashness 0 1}
        </div>

        <div class="form-group">
          <label for="minWaitTime">Min Wait Time {showMs model.minWait}</label>
          {sliderView "minWaitTime" model.minWait SetMinWait 0 model.maxWait}
        </div>

        <div class="form-group">
          <label for="maxWaitTime">Max Wait Time {showMs model.maxWait}</label>
          {sliderView "maxWaitTime" model.maxWait SetMaxWait model.minWait (1 * second)}
        </div>

        <div class="form-group">
          <div class="checkbox">
            <label>
              <input type="checkbox" {onClick ToggleShowCursor} {checked model.showCursor} />
              <strong>Show Cursor?</strong>
            </label>
          </div>
        </div>

        {viewCursorBlinkInterval model}
      </div>
    else
      <div>
        <a {onClick ToggleShowAdvanced}>Advanced...</a>
      </div>

showMs : Float -> Html Msg
showMs val =
  <span class="value-preview">({=(toString val)}ms)</span>

showPct : Float -> Html Msg
showPct val =
  case Decimal.fromFloat (val * 100) of
    Just v ->
      <span class="value-preview">({=(Decimal.toString <| Decimal.round -2 v)}%)</span>
    Nothing ->
      <span></span>

sliderView : String -> a -> (String -> Msg) -> Float -> Float -> Html Msg
sliderView id val msg min max =
  <div>
    <input
      id={id}
      type="range"
      min={toString min}
      max={toString max}
      step="0.01"
      value={toString val}
      {on "input" (Json.map msg targetValue)} />
  </div>

viewCursorBlinkInterval : Model -> Html Msg
viewCursorBlinkInterval model =
  if model.showCursor
    then
      <div class="form-group">
        <label for="cursorBlinkInterval">Cursor Blink Interval {showMs model.cursorBlinkInterval}</label>
        {sliderView "cursorBlinkInterval" model.cursorBlinkInterval SetCursorBlinkInterval 10 (1 * second)}
      </div>
    else
      <div></div>




















-- Kanye's lovin' it
kanye : String
kanye =
  """McDonalds Man by Kanye West

McDonalds Man
The french fries had a plan
The french fries had a plan
The salad bar and the ketchup made a band
Cus the french fries had a plan
The french fries had a plan

McDonalds Man
McDonalds
I know them french fries have a plan
I know them french fries have a plan
The cheeseburger and the shakes formed a band
To overthrow the french fries plan
I always knew them french fries was evil man
Smelling all good and shit
I don't trust no food that smells that good man
I don't trust it
I just can't

McDonalds Man
McDonalds Man
McDonalds, damn
Them french fries look good tho
I knew the Diet Coke was jealous of the fries
I knew the McNuggets was jealous of the fries
Even the McRib was jealous of the fries
I could see it through his artificial meat eyes
And he only be there some of the time

Everybody was jealous of them french fries
Except for that one special guy
That smooth apple pie"""
