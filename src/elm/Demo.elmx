module Demo exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Html.App as App
import Time exposing (Time, millisecond, second)
import Char
import String
import Random
import List exposing (..)
import List.Extra exposing (..)
import DrunkLabel
import Json.Decode as Json
import Update.Extra.Infix exposing (..)
import Data.Decimal as Decimal


main =
  App.program
    { init = init 0
    , view = view
    , update = update
    , subscriptions = subscriptions
    }

-- MODEL

type alias Model =
  { preview : DrunkLabel.Model
  , tagline : DrunkLabel.Model
  , showAdvanced : Bool
  }


init : Int -> (Model, Cmd Msg)
init seed =
  let
    (previewModel, previewCmd) = DrunkLabel.init (Random.initialSeed <| seed)
    (taglineModel, taglineCmd) = DrunkLabel.init (Random.initialSeed <| seed + 1) -- +1 to avoid the same seed trail
  in
    { preview = { previewModel | value = "A quick brown fox jumps over the lazy dog" }
    , tagline = { taglineModel | value = "Mistyping as a Service", sobriety = 0.85, brashness = 0.5 }
    , showAdvanced = True
    } ! [ Cmd.map PreviewMsg previewCmd, Cmd.map TaglineMsg taglineCmd ]

-- UPDATE

type Msg
  = PreviewMsg DrunkLabel.Msg
  | TaglineMsg DrunkLabel.Msg
  | ResetTagline
  | SetSobriety String
  | SetBrashness String
  | SetMinWait String
  | SetMaxWait String
  | ToggleShowCursor
  | SetCursorBlinkInterval String
  | ToggleShowAdvanced

update : Msg -> Model -> (Model, Cmd Msg)
update msg model =
  let
    setPreviewFloat str default submsg =
      let
        fval =
          case String.toFloat str of
            Ok f -> f
            Err _ -> default
      in
        update (PreviewMsg (submsg fval)) model
  in
    case msg of
      PreviewMsg submsg ->
        let (preview, cmd') = DrunkLabel.update submsg model.preview
        in { model | preview = preview } ! [ Cmd.map PreviewMsg cmd' ]
      TaglineMsg submsg ->
        let (tagline, cmd') = DrunkLabel.update submsg model.tagline
        in { model | tagline = tagline } ! [ Cmd.map TaglineMsg cmd' ]
      ResetTagline ->
        update (TaglineMsg <| DrunkLabel.SetValue model.tagline.value) model
      SetSobriety str ->
        setPreviewFloat str model.preview.sobriety DrunkLabel.SetSobriety
      SetBrashness str ->
        setPreviewFloat str model.preview.brashness DrunkLabel.SetBrashness
      SetMinWait str ->
        setPreviewFloat str model.preview.minWait DrunkLabel.SetMinWait
      SetMaxWait str ->
        setPreviewFloat str model.preview.maxWait DrunkLabel.SetMaxWait
      ToggleShowCursor ->
        update (PreviewMsg <| DrunkLabel.ShowCursor <| not model.preview.showCursor) model
      SetCursorBlinkInterval str ->
        setPreviewFloat str model.preview.cursorBlinkInterval DrunkLabel.SetCursorBlinkInterval
      ToggleShowAdvanced ->
        { model | showAdvanced = not model.showAdvanced } ! []


-- SUBSCRIPTIONS

subscriptions : Model -> Sub Msg
subscriptions model =
  Sub.batch
    [ Sub.map PreviewMsg <| DrunkLabel.subscriptions model.preview
    , Sub.map TaglineMsg <| DrunkLabel.subscriptions model.tagline
    , Time.every (10 * second) (always ResetTagline)
    ]


-- VIEW
view : Model -> Html Msg
view model =
  <div>
    <div class="jumbotron">
      <div class="container">
        <h1>
          DrunkLabel
        </h1>
        <h2>{App.map PreviewMsg <| DrunkLabel.view model.tagline}</h2>
        <p>
          DrunkLabel is an Elm component which types things out to the screen ... poorly. The sobriety of
          the typist is entirely at your control.
        </p>
        <p>
          <a class="btn btn-primary btn-lg" href="http://package.elm-lang.org/packages/freakingawesome/drunk-label/latest" role="button">Get DrunkLabel</a>
          <a class="btn btn-default btn-lg pull-right" href="https://github.com/freakingawesome/drunk-label" role="button">Browse Source</a>
        </p>
      </div>
    </div>
    <div class="container">
      <h3>Playground</h3>
      <p>
        DrunkLabel will attempt to type your input in the output
        field. The higher the blood alcohol content, the longer it will take, so be patient and
        enjoy the struggle!
      </p>
      <div class="row">
        <div class="col-sm-4">
          <form>
            <div class="form-group">
              <label for="input">Input</label>
              <textarea class="form-control" rows="3" cols="80" id="input" {onInput (PreviewMsg << DrunkLabel.SetValue)}>{=model.preview.value}</textarea>
            </div>
            
            {viewAdvanced model}
          </form>
        </div>

        <div class="col-sm-8">
          <form>
            <div class="form-group">
              <label for="output">Output</label>
              <pre style="font-size: 20px; min-height: 500px;">{App.map PreviewMsg <| DrunkLabel.view model.preview}</pre>
            </div>
          </form>
        </div>
      </div>
      <div class="pull-right">
        <a class="form-control-static pull-right" {onClick (PreviewMsg <| DrunkLabel.SetValue kanye)}>kanye</a>
      </div>
    </div>
  </div>

viewAdvanced model =
  if model.showAdvanced
    then
      <div>
        <div class="form-group">
          <label for="sobriety">Sobriety {showPct model.preview.sobriety}</label>
          {sliderView "sobriety" model.preview.sobriety SetSobriety 0.5 1}
        </div>

        <div class="form-group">
          <label for="brashness">Brashness {showPct model.preview.brashness}</label>
          {sliderView "brashness" model.preview.brashness SetBrashness 0 1}
        </div>

        <div class="form-group">
          <label for="minWaitTime">Min Wait Time {showMs model.preview.minWait}</label>
          {sliderView "minWaitTime" model.preview.minWait SetMinWait 0 model.preview.maxWait}
        </div>

        <div class="form-group">
          <label for="maxWaitTime">Max Wait Time {showMs model.preview.maxWait}</label>
          {sliderView "maxWaitTime" model.preview.maxWait SetMaxWait model.preview.minWait (1 * second)}
        </div>

        <div class="form-group">
          <div class="checkbox">
            <label>
              <input type="checkbox" {onClick ToggleShowCursor} {checked model.preview.showCursor} />
              <strong>Show Cursor?</strong>
            </label>
          </div>
        </div>

        {viewCursorBlinkInterval model}
      </div>
    else
      <div>
        <a {onClick ToggleShowAdvanced}>Advanced...</a>
      </div>

showMs val =
  <span class="value-preview">({=(toString val)}ms)</span>

showPct val =
  case Decimal.fromFloat (val * 100) of
    Just v ->
      <span class="value-preview">({=(Decimal.toString <| Decimal.round -2 v)}%)</span>
    Nothing ->
      <span></span>

sliderView id val msg min max =
  <div>
    <input
      id={id}
      type="range"
      min={toString min}
      max={toString max}
      step="0.01"
      value={toString val}
      {on "input" (Json.map msg targetValue)} />
  </div>


viewCursorBlinkInterval model =
  if model.preview.showCursor
    then
      <div class="form-group">
        <label for="cursorBlinkInterval">Cursor Blink Interval {showMs model.preview.cursorBlinkInterval}</label>
        {sliderView "cursorBlinkInterval" model.preview.cursorBlinkInterval SetCursorBlinkInterval 10 (1 * second)}
      </div>
    else
      <div></div>




















-- Kanye's lovin' it
kanye =
  """McDonalds Man by Kanye West

McDonalds Man
The french fries had a plan
The french fries had a plan
The salad bar and the ketchup made a band
Cus the french fries had a plan
The french fries had a plan

McDonalds Man
McDonalds
I know them french fries have a plan
I know them french fries have a plan
The cheeseburger and the shakes formed a band
To overthrow the french fries plan
I always knew them french fries was evil man
Smelling all good and shit
I don't trust no food that smells that good man
I don't trust it
I just can't

McDonalds Man
McDonalds Man
McDonalds, damn
Them french fries look good tho
I knew the Diet Coke was jealous of the fries
I knew the McNuggets was jealous of the fries
Even the McRib was jealous of the fries
I could see it through his artificial meat eyes
And he only be there some of the time

Everybody was jealous of them french fries
Except for that one special guy
That smooth apple pie"""
